// compile-flags: -Zprint-desugared-specs -Zprint-typeckd-specs -Zhide-uuids
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"







// test that we get correct span information




#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_max_$(NUM_UUID)(a: i32, b: i32,
                                                         result: i32) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { result == a || result == b };
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}}]}}"]
fn prusti_post_item_max_$(NUM_UUID)(a: i32, b: i32,
                                                         result: i32) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { result >= a };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_102"]
    || -> bool { result >= b };
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn max(a: i32, b: i32) -> i32 { if a > b { a } else { b } }
fn test_max1() {
    let a = 5;
    let b = 6;
    let z = max(a, b);
    if !(z == 6) { { ::std::rt::begin_panic("assertion failed: z == 6") } };
}
fn test_max2() {
    let a = 5;
    let b = 6;
    let z = max(a, b);
    if !(z == 5) { { ::std::rt::begin_panic("assertion failed: z == 5") } };
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}},{/"kind/":{/"Implies/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}}]}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}}]}}"]
fn prusti_post_item_test_max3_$(NUM_UUID)(result: i32) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { true };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_102"]
    || -> bool { true };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_103"]
    || -> bool { result == 3 };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_104"]
    || -> bool { true || false };
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test_max3() -> i32 { let a = 4; let b = 3; max(a, b) }
fn main() { }
Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:8 ~ calls[317d]::prusti_post_item_max_$(NUM_UUID)::{closure#0}) }) }
Assertion { kind: And([Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:10 ~ calls[317d]::prusti_post_item_max_$(NUM_UUID)::{closure#0}) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:11 ~ calls[317d]::prusti_post_item_max_$(NUM_UUID)::{closure#1}) }) }]) }
Assertion { kind: And([Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:14 ~ calls[317d]::prusti_post_item_test_max3_$(NUM_UUID)::{closure#0}) }) }, Assertion { kind: Implies(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:15 ~ calls[317d]::prusti_post_item_test_max3_$(NUM_UUID)::{closure#1}) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: DefId(0:16 ~ calls[317d]::prusti_post_item_test_max3_$(NUM_UUID)::{closure#2}) }) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:17 ~ calls[317d]::prusti_post_item_test_max3_$(NUM_UUID)::{closure#3}) }) }]) }
