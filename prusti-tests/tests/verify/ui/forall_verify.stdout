// compile-flags: -Zprint-desugared-specs -Zprint-typeckd-specs -Zhide-uuids
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"






#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[prusti::pure]
fn identity(x: i32) -> i32 { x }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},[]]}}"]
fn prusti_post_item_test1_$(NUM_UUID)(result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |x: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { true };
        };
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test1() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},[]]}}"]
fn prusti_post_item_test2_$(NUM_UUID)(result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |x: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { identity(x) == x };
        };
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test2() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},[]]}}"]
fn prusti_post_item_test3_$(NUM_UUID)(result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |x: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { identity(x) == x + 1 };
        };
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test3() { }
fn main() { }
Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:8 ~ forall_verify[317d]::prusti_post_item_test1_$(NUM_UUID)::{closure#0}::{closure#0}) }) }) }
Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:12 ~ forall_verify[317d]::prusti_post_item_test2_$(NUM_UUID)::{closure#0}::{closure#0}) }) }) }
Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:16 ~ forall_verify[317d]::prusti_post_item_test3_$(NUM_UUID)::{closure#0}::{closure#0}) }) }) }
