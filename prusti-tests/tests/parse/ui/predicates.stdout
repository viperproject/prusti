// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"






#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
/// Tests for predicate parsing and desugaring
use prusti_contracts::*;
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},[]]}}"]
fn prusti_pred_item_pred_$(NUM_UUID)(a: bool) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |b: bool|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { a == b };
        };
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pure]
#[prusti::trusted]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
fn pred(a: bool) -> bool {
    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["not implemented: "],
                                                                &match (&::core::fmt::Arguments::new_v1(&["predicate"],
                                                                                                        &match ()
                                                                                                             {
                                                                                                             ()
                                                                                                             =>
                                                                                                             [],
                                                                                                         }),)
                                                                     {
                                                                     (arg0,)
                                                                     =>
                                                                     [::core::fmt::ArgumentV1::new(arg0,
                                                                                                   ::core::fmt::Display::fmt)],
                                                                 }))
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_pre_item_use_pred_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { pred(true) };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn use_pred() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Implies/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}}]}},[]]}}"]
fn prusti_pred_item_forall_implication_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |x: usize|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { x != 0 };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || -> bool { x * 2 != 0 };
        };
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pure]
#[prusti::trusted]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
fn forall_implication() -> bool {
    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["not implemented: "],
                                                                &match (&::core::fmt::Arguments::new_v1(&["predicate"],
                                                                                                        &match ()
                                                                                                             {
                                                                                                             ()
                                                                                                             =>
                                                                                                             [],
                                                                                                         }),)
                                                                     {
                                                                     (arg0,)
                                                                     =>
                                                                     [::core::fmt::ArgumentV1::new(arg0,
                                                                                                   ::core::fmt::Display::fmt)],
                                                                 }))
}
fn main() { }
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:10 ~ predicates[317d]::prusti_pre_item_use_pred_$(NUM_UUID)::{closure#0}) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [], pledges: [], predicate_body: Some(Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, bool)] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:7 ~ predicates[317d]::prusti_pred_item_pred_$(NUM_UUID)::{closure#0}::{closure#0}) }) }) }), pure: true, trusted: true })
Procedure(ProcedureSpecification { pres: [], posts: [], pledges: [], predicate_body: Some(Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, usize)] }, TriggerSet([]), Assertion { kind: Implies(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:14 ~ predicates[317d]::prusti_pred_item_forall_implication_$(NUM_UUID)::{closure#0}::{closure#0}) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: DefId(0:15 ~ predicates[317d]::prusti_pred_item_forall_implication_$(NUM_UUID)::{closure#0}::{closure#1}) }) }) }) }), pure: true, trusted: true })
