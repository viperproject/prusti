// compile-flags: -Zprint-desugared-specs -Zprint-typeckd-specs -Zskip-verify
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"

#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;

use prusti_contracts::*;

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"And/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}}]}},[]]}}"]
fn prusti_pre_item_test3_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { a + a == a + a };

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || -> bool { true };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test3() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},[]]}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}}]}}"]
fn prusti_pre_item_test4_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { (a + b == a + b && true) == (a + b == a + b) };
        };

    #[prusti::expr_id = "$(NUM_UUID)_103"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_104"]
    || -> bool { true };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test4() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Implies/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}}]}},[]]}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":106}}}]}}"]
fn prusti_pre_item_test5_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { a + b == a + b };

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || -> bool { a + b == a + b };
        };

    #[prusti::expr_id = "$(NUM_UUID)_104"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_105"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_106"]
    || -> bool { true };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test5() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102},{/"spec_id/":/"$(UUID)/",/"expr_id/":103}]]]}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":106}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":107}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":108}}}]}}"]
fn prusti_pre_item_test8_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || -> bool { a + a == a + a };

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { 1; };

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || { 2 == 2 && true; };
        };

    #[prusti::expr_id = "$(NUM_UUID)_105"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_106"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_107"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_108"]
    || -> bool { true };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test8() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102},{/"spec_id/":/"$(UUID)/",/"expr_id/":103}],[{/"spec_id/":/"$(UUID)/",/"expr_id/":104}]]]}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":106}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":107}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":108}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":109}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":110}}}]}}"]
fn prusti_pre_item_test9_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_105"]
            || -> bool { a + b == a + b };

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { 1; };

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || { 2; };

            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || { 1; };
        };

    #[prusti::expr_id = "$(NUM_UUID)_106"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_107"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_108"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_109"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_110"]
    || -> bool { true };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test9() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Implies/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":108}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":109}}}]}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102},{/"spec_id/":/"$(UUID)/",/"expr_id/":103},{/"spec_id/":/"$(UUID)/",/"expr_id/":104}],[{/"spec_id/":/"$(UUID)/",/"expr_id/":105},{/"spec_id/":/"$(UUID)/",/"expr_id/":106}],[{/"spec_id/":/"$(UUID)/",/"expr_id/":107}]]]}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":110}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":111}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":112}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":113}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":114}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":115}}}]}}"]
fn prusti_pre_item_test10_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_108"]
            || -> bool { a + b == a + b };

            #[prusti::expr_id = "$(NUM_UUID)_109"]
            || -> bool { a + b == a + b };

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { 1; };

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || { 2; };

            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || { 3; };

            #[prusti::expr_id = "$(NUM_UUID)_105"]
            || { 1; };

            #[prusti::expr_id = "$(NUM_UUID)_106"]
            || { 2; };

            #[prusti::expr_id = "$(NUM_UUID)_107"]
            || { 1; };
        };

    #[prusti::expr_id = "$(NUM_UUID)_110"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_111"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_112"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_113"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_114"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_115"]
    || -> bool { true };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test10() { }

fn main() { }
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: And([Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: BodyId { hir_id: HirId { owner: DefId(0:5 ~ forall[317d]::prusti_pre_item_test3_$(NUM_UUID)[0]), local_id: 19 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: BodyId { hir_id: HirId { owner: DefId(0:5 ~ forall[317d]::prusti_pre_item_test3_$(NUM_UUID)[0]), local_id: 26 } } }) }]) }) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: And([Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: BodyId { hir_id: HirId { owner: DefId(0:10 ~ forall[317d]::prusti_pre_item_test4_$(NUM_UUID)[0]), local_id: 37 } } }) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: BodyId { hir_id: HirId { owner: DefId(0:10 ~ forall[317d]::prusti_pre_item_test4_$(NUM_UUID)[0]), local_id: 48 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: BodyId { hir_id: HirId { owner: DefId(0:10 ~ forall[317d]::prusti_pre_item_test4_$(NUM_UUID)[0]), local_id: 55 } } }) }]) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: And([Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: BodyId { hir_id: HirId { owner: DefId(0:24 ~ forall[317d]::prusti_pre_item_test8_$(NUM_UUID)[0]), local_id: 19 } } }) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: BodyId { hir_id: HirId { owner: DefId(0:24 ~ forall[317d]::prusti_pre_item_test8_$(NUM_UUID)[0]), local_id: 46 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(106), expr: BodyId { hir_id: HirId { owner: DefId(0:24 ~ forall[317d]::prusti_pre_item_test8_$(NUM_UUID)[0]), local_id: 53 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(107), expr: BodyId { hir_id: HirId { owner: DefId(0:24 ~ forall[317d]::prusti_pre_item_test8_$(NUM_UUID)[0]), local_id: 60 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(108), expr: BodyId { hir_id: HirId { owner: DefId(0:24 ~ forall[317d]::prusti_pre_item_test8_$(NUM_UUID)[0]), local_id: 67 } } }) }]) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: And([Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: Implies(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: BodyId { hir_id: HirId { owner: DefId(0:16 ~ forall[317d]::prusti_pre_item_test5_$(NUM_UUID)[0]), local_id: 23 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: BodyId { hir_id: HirId { owner: DefId(0:16 ~ forall[317d]::prusti_pre_item_test5_$(NUM_UUID)[0]), local_id: 40 } } }) }) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: BodyId { hir_id: HirId { owner: DefId(0:16 ~ forall[317d]::prusti_pre_item_test5_$(NUM_UUID)[0]), local_id: 51 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: BodyId { hir_id: HirId { owner: DefId(0:16 ~ forall[317d]::prusti_pre_item_test5_$(NUM_UUID)[0]), local_id: 58 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(106), expr: BodyId { hir_id: HirId { owner: DefId(0:16 ~ forall[317d]::prusti_pre_item_test5_$(NUM_UUID)[0]), local_id: 65 } } }) }]) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: And([Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: BodyId { hir_id: HirId { owner: DefId(0:34 ~ forall[317d]::prusti_pre_item_test9_$(NUM_UUID)[0]), local_id: 23 } } }) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(106), expr: BodyId { hir_id: HirId { owner: DefId(0:34 ~ forall[317d]::prusti_pre_item_test9_$(NUM_UUID)[0]), local_id: 52 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(107), expr: BodyId { hir_id: HirId { owner: DefId(0:34 ~ forall[317d]::prusti_pre_item_test9_$(NUM_UUID)[0]), local_id: 59 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(108), expr: BodyId { hir_id: HirId { owner: DefId(0:34 ~ forall[317d]::prusti_pre_item_test9_$(NUM_UUID)[0]), local_id: 66 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(109), expr: BodyId { hir_id: HirId { owner: DefId(0:34 ~ forall[317d]::prusti_pre_item_test9_$(NUM_UUID)[0]), local_id: 73 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(110), expr: BodyId { hir_id: HirId { owner: DefId(0:34 ~ forall[317d]::prusti_pre_item_test9_$(NUM_UUID)[0]), local_id: 80 } } }) }]) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: And([Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: Implies(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(108), expr: BodyId { hir_id: HirId { owner: DefId(0:46 ~ forall[317d]::prusti_pre_item_test10_$(NUM_UUID)[0]), local_id: 23 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(109), expr: BodyId { hir_id: HirId { owner: DefId(0:46 ~ forall[317d]::prusti_pre_item_test10_$(NUM_UUID)[0]), local_id: 40 } } }) }) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(110), expr: BodyId { hir_id: HirId { owner: DefId(0:46 ~ forall[317d]::prusti_pre_item_test10_$(NUM_UUID)[0]), local_id: 87 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(111), expr: BodyId { hir_id: HirId { owner: DefId(0:46 ~ forall[317d]::prusti_pre_item_test10_$(NUM_UUID)[0]), local_id: 94 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(112), expr: BodyId { hir_id: HirId { owner: DefId(0:46 ~ forall[317d]::prusti_pre_item_test10_$(NUM_UUID)[0]), local_id: 101 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(113), expr: BodyId { hir_id: HirId { owner: DefId(0:46 ~ forall[317d]::prusti_pre_item_test10_$(NUM_UUID)[0]), local_id: 108 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(114), expr: BodyId { hir_id: HirId { owner: DefId(0:46 ~ forall[317d]::prusti_pre_item_test10_$(NUM_UUID)[0]), local_id: 115 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(115), expr: BodyId { hir_id: HirId { owner: DefId(0:46 ~ forall[317d]::prusti_pre_item_test10_$(NUM_UUID)[0]), local_id: 122 } } }) }]) }], posts: [] })
