// compile-flags: -Zprint-desugared-specs -Zprint-typeckd-specs -Zskip-verify -Zhide-uuids
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"

#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;

use prusti_contracts::*;

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},[]]}}"]
fn prusti_pre_item_test3_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { a + a == a + a };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test3() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},[]]}}"]
fn prusti_pre_item_test4_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { (a + b == a + b && true) == (a + b == a + b) };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test4() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Implies/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}}]}},[]]}}"]
fn prusti_pre_item_test5_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { a + b == a + b };

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || -> bool { a + b == a + b };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test5() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102},{/"spec_id/":/"$(UUID)/",/"expr_id/":103}]]]}}"]
fn prusti_pre_item_test8_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || -> bool { a + a == a + a };

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { 1; };

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || { 2 == 2 && true; };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test8() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102},{/"spec_id/":/"$(UUID)/",/"expr_id/":103}],[{/"spec_id/":/"$(UUID)/",/"expr_id/":104}]]]}}"]
fn prusti_pre_item_test9_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_105"]
            || -> bool { a + b == a + b };

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { 1; };

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || { 2; };

            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || { 1; };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test9() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Implies/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":108}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":109}}}]}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102},{/"spec_id/":/"$(UUID)/",/"expr_id/":103},{/"spec_id/":/"$(UUID)/",/"expr_id/":104}],[{/"spec_id/":/"$(UUID)/",/"expr_id/":105},{/"spec_id/":/"$(UUID)/",/"expr_id/":106}],[{/"spec_id/":/"$(UUID)/",/"expr_id/":107}]]]}}"]
fn prusti_pre_item_test10_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_108"]
            || -> bool { a + b == a + b };

            #[prusti::expr_id = "$(NUM_UUID)_109"]
            || -> bool { a + b == a + b };

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { 1; };

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || { 2; };

            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || { 3; };

            #[prusti::expr_id = "$(NUM_UUID)_105"]
            || { 1; };

            #[prusti::expr_id = "$(NUM_UUID)_106"]
            || { 2; };

            #[prusti::expr_id = "$(NUM_UUID)_107"]
            || { 1; };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test10() { }

fn main() { }
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: BodyId { hir_id: HirId { owner: DefId(0:5 ~ forall[317d]::prusti_pre_item_test3_$(NUM_UUID)[0]), local_id: 19 } } }) }) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: BodyId { hir_id: HirId { owner: DefId(0:9 ~ forall[317d]::prusti_pre_item_test4_$(NUM_UUID)[0]), local_id: 37 } } }) }) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: BodyId { hir_id: HirId { owner: DefId(0:18 ~ forall[317d]::prusti_pre_item_test8_$(NUM_UUID)[0]), local_id: 19 } } }) }) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: BodyId { hir_id: HirId { owner: DefId(0:24 ~ forall[317d]::prusti_pre_item_test9_$(NUM_UUID)[0]), local_id: 23 } } }) }) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: Implies(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: BodyId { hir_id: HirId { owner: DefId(0:13 ~ forall[317d]::prusti_pre_item_test5_$(NUM_UUID)[0]), local_id: 23 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: BodyId { hir_id: HirId { owner: DefId(0:13 ~ forall[317d]::prusti_pre_item_test5_$(NUM_UUID)[0]), local_id: 40 } } }) }) }) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: Implies(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(108), expr: BodyId { hir_id: HirId { owner: DefId(0:31 ~ forall[317d]::prusti_pre_item_test10_$(NUM_UUID)[0]), local_id: 23 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(109), expr: BodyId { hir_id: HirId { owner: DefId(0:31 ~ forall[317d]::prusti_pre_item_test10_$(NUM_UUID)[0]), local_id: 40 } } }) }) }) }], posts: [] })
