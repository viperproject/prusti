// compile-flags: -Zprint-desugared-specs -Zprint-typeckd-specs -Zskip-verify -Zhide-uuids
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"

#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;

use prusti_contracts::*;

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}}]}}"]
fn prusti_pre_item_test1_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { 1 == 1 };

    #[prusti::expr_id = "$(NUM_UUID)_102"]
    || -> bool { 1 != 2 };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test1() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test2_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { 1 == 1 || 1 == 2 };
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test2() { }

fn main() { }
Procedure(ProcedureSpecification { pres: [], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: BodyId { hir_id: HirId { owner: DefId(0:9 ~ expression[317d]::prusti_post_item_test2_$(NUM_UUID)[0]), local_id: 11 } } }) }] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: And([Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: BodyId { hir_id: HirId { owner: DefId(0:5 ~ expression[317d]::prusti_pre_item_test1_$(NUM_UUID)[0]), local_id: 7 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: BodyId { hir_id: HirId { owner: DefId(0:5 ~ expression[317d]::prusti_pre_item_test1_$(NUM_UUID)[0]), local_id: 16 } } }) }]) }], posts: [] })
