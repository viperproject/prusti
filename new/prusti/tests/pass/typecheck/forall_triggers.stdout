// compile-flags: -Zprint-desugared-specs -Zprint-typeckd-specs -Zskip-verify
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"

#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;

use prusti_contracts::*;

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102}]]]}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}}]}}"]
fn prusti_pre_item_test1_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || -> bool { true };

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a; };
        };

    #[prusti::expr_id = "$(NUM_UUID)_104"]
    || -> bool { true };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test1() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":103,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}},[]]}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102}]]]}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":106}}}]}}"]
fn prusti_pre_item_test2_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            |b: i32|
                {

                    #[prusti::expr_id =
                      "$(NUM_UUID)_104"]
                    || -> bool { true };
                };

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a && true; };
        };

    #[prusti::expr_id = "$(NUM_UUID)_105"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_106"]
    || -> bool { true };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test2() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":103,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":104}]]]}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102}]]]}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":106}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":107}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":108}}}]}}"]
fn prusti_pre_item_test3_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            |b: i32|
                {

                    #[prusti::expr_id =
                      "$(NUM_UUID)_105"]
                    || -> bool { true };

                    #[prusti::expr_id =
                      "$(NUM_UUID)_104"]
                    || { a == a; };
                };

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a; };
        };

    #[prusti::expr_id = "$(NUM_UUID)_106"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_107"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_108"]
    || -> bool { true };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test3() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":103,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":104}]]]}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102}]]]}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":106}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":107}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":108}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":109}}}]}}"]
fn prusti_pre_item_test4_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_103"]
            |b: i32|
                {

                    #[prusti::expr_id =
                      "$(NUM_UUID)_105"]
                    || -> bool { true };

                    #[prusti::expr_id =
                      "$(NUM_UUID)_104"]
                    || { a == b; };
                };

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a && true; };
        };

    #[prusti::expr_id = "$(NUM_UUID)_106"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_107"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_108"]
    || -> bool { true };

    #[prusti::expr_id = "$(NUM_UUID)_109"]
    || -> bool { true };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test4() { }

fn main() { }
Procedure(ProcedureSpecification { pres: [Assertion { kind: And([Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: BodyId { hir_id: HirId { owner: DefId(0:5 ~ forall_triggers[317d]::prusti_pre_item_test1_$(NUM_UUID)[0]), local_id: 9 } } }) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: BodyId { hir_id: HirId { owner: DefId(0:5 ~ forall_triggers[317d]::prusti_pre_item_test1_$(NUM_UUID)[0]), local_id: 30 } } }) }]) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: And([Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), vars: [] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: BodyId { hir_id: HirId { owner: DefId(0:11 ~ forall_triggers[317d]::prusti_pre_item_test2_$(NUM_UUID)[0]), local_id: 13 } } }) }) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: BodyId { hir_id: HirId { owner: DefId(0:11 ~ forall_triggers[317d]::prusti_pre_item_test2_$(NUM_UUID)[0]), local_id: 40 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(106), expr: BodyId { hir_id: HirId { owner: DefId(0:11 ~ forall_triggers[317d]::prusti_pre_item_test2_$(NUM_UUID)[0]), local_id: 47 } } }) }]) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: And([Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), vars: [] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: BodyId { hir_id: HirId { owner: DefId(0:19 ~ forall_triggers[317d]::prusti_pre_item_test3_$(NUM_UUID)[0]), local_id: 13 } } }) }) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(106), expr: BodyId { hir_id: HirId { owner: DefId(0:19 ~ forall_triggers[317d]::prusti_pre_item_test3_$(NUM_UUID)[0]), local_id: 48 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(107), expr: BodyId { hir_id: HirId { owner: DefId(0:19 ~ forall_triggers[317d]::prusti_pre_item_test3_$(NUM_UUID)[0]), local_id: 55 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(108), expr: BodyId { hir_id: HirId { owner: DefId(0:19 ~ forall_triggers[317d]::prusti_pre_item_test3_$(NUM_UUID)[0]), local_id: 62 } } }) }]) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: And([Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), vars: [] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: BodyId { hir_id: HirId { owner: DefId(0:29 ~ forall_triggers[317d]::prusti_pre_item_test4_$(NUM_UUID)[0]), local_id: 13 } } }) }) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(106), expr: BodyId { hir_id: HirId { owner: DefId(0:29 ~ forall_triggers[317d]::prusti_pre_item_test4_$(NUM_UUID)[0]), local_id: 50 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(107), expr: BodyId { hir_id: HirId { owner: DefId(0:29 ~ forall_triggers[317d]::prusti_pre_item_test4_$(NUM_UUID)[0]), local_id: 57 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(108), expr: BodyId { hir_id: HirId { owner: DefId(0:29 ~ forall_triggers[317d]::prusti_pre_item_test4_$(NUM_UUID)[0]), local_id: 64 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(109), expr: BodyId { hir_id: HirId { owner: DefId(0:29 ~ forall_triggers[317d]::prusti_pre_item_test4_$(NUM_UUID)[0]), local_id: 71 } } }) }]) }], posts: [] })
