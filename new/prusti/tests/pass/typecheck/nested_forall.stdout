// compile-flags: -Zprint-desugared-specs -Zprint-typeckd-specs -Zskip-verify -Zhide-uuids
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"

#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;

use prusti_contracts::*;

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":102,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}},[]]}},[]]}}"]
fn prusti_pre_item_test1_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            |a: i32|
                {

                    #[prusti::expr_id =
                      "$(NUM_UUID)_103"]
                    || -> bool { a == a };
                };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test1() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":102,/"count/":1},{/"kind/":{/"Implies/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}}]}},[]]}},[]]}}"]
fn prusti_pre_item_test2_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            |b: i32|
                {

                    #[prusti::expr_id =
                      "$(NUM_UUID)_103"]
                    || -> bool { a == a };

                    #[prusti::expr_id =
                      "$(NUM_UUID)_104"]
                    || -> bool { b == b };
                };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test2() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":102,/"count/":1},{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":103,/"count/":1},{/"kind/":{/"And/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}}]}},[]]}},[]]}},[]]}}"]
fn prusti_pre_item_test3_$(NUM_UUID)() {

    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::expr_id = "$(NUM_UUID)_102"]
            |b: i32|
                {

                    #[prusti::expr_id =
                      "$(NUM_UUID)_103"]
                    |c: i32|
                        {

                            #[prusti::expr_id =
                              "$(NUM_UUID)_104"]
                            || -> bool { a == a };

                            #[prusti::expr_id =
                              "$(NUM_UUID)_105"]
                            || -> bool { b == b };
                        };
                };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test3() { }

fn main() { }
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), vars: [] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: BodyId { hir_id: HirId { owner: DefId(0:5 ~ nested_forall[317d]::prusti_pre_item_test1_$(NUM_UUID)[0]), local_id: 17 } } }) }) }) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), vars: [] }, TriggerSet([]), Assertion { kind: Implies(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: BodyId { hir_id: HirId { owner: DefId(0:10 ~ nested_forall[317d]::prusti_pre_item_test2_$(NUM_UUID)[0]), local_id: 17 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: BodyId { hir_id: HirId { owner: DefId(0:10 ~ nested_forall[317d]::prusti_pre_item_test2_$(NUM_UUID)[0]), local_id: 28 } } }) }) }) }) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [] }, TriggerSet([]), Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), vars: [] }, TriggerSet([]), Assertion { kind: ForAll(ForAllVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), vars: [] }, TriggerSet([]), Assertion { kind: And([Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: BodyId { hir_id: HirId { owner: DefId(0:16 ~ nested_forall[317d]::prusti_pre_item_test3_$(NUM_UUID)[0]), local_id: 21 } } }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: BodyId { hir_id: HirId { owner: DefId(0:16 ~ nested_forall[317d]::prusti_pre_item_test3_$(NUM_UUID)[0]), local_id: 32 } } }) }]) }) }) }) }], posts: [] })
