#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
// compile-flags: -Zprint-desugared-specs -Zprint-typeckd-specs
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"

use prusti_contracts::*;

#[allow(unused_doc_comments)]
#[doc =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_pre_item_test1_$(NUM_UUID)() {

    #[doc = "$(NUM_UUID)_101"]
    || -> bool { true };
}
fn test1() { }

#[allow(unused_doc_comments)]
#[doc =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test2_$(NUM_UUID)() {

    #[doc = "$(NUM_UUID)_101"]
    || -> bool { true };
}
fn test2() { }

fn test3() {
    for _ in 0..2 {


        {
            #[allow(dead_code)]
            enum ProcMacroHack { Value = ("true", 0).1, }
            macro_rules! proc_macro_call {
                () =>
                {
                    if false
                    {
                        #
                        [doc =
                         "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
                        let _prusti_loop_invariant =
                        {
                            # [doc = "$(NUM_UUID)_101"]
                            || -> bool { true } ;
                        } ;
                    }
                }
            }
            if false {
                #[doc =
                  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
                let _prusti_loop_invariant =
                    {

                        #[doc = "$(NUM_UUID)_101"]
                        || -> bool { true };
                    };
            }
        }
    }
}
#[allow(unused_doc_comments)]
#[doc =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_pre_item_test4_$(NUM_UUID)() {

    #[doc = "$(NUM_UUID)_101"]
    || -> bool { true };
}
#[allow(unused_doc_comments)]
#[doc =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test4_$(NUM_UUID)() {

    #[doc = "$(NUM_UUID)_101"]
    || -> bool { true };
}
fn test4() {
    for _ in 0..2 {
        {
            #[allow(dead_code)]
            enum ProcMacroHack { Value = ("true", 0).1, }
            macro_rules! proc_macro_call {
                () =>
                {
                    if false
                    {
                        #
                        [doc =
                         "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
                        let _prusti_loop_invariant =
                        {
                            # [doc = "$(NUM_UUID)_101"]
                            || -> bool { true } ;
                        } ;
                    }
                }
            }
            if false {
                #[doc =
                  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
                let _prusti_loop_invariant =
                    {

                        #[doc = "$(NUM_UUID)_101"]
                        || -> bool { true };
                    };
            }
        }
    }
}
fn main() { }
DefId(0:4 ~ true[317d]::test3[0]) ProcedureSpecification { pres: [], posts: [] }
DefId(0:5 ~ true[317d]::main[0]) ProcedureSpecification { pres: [], posts: [] }
DefId(0:8 ~ true[317d]::test1[0]) ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: BodyId { hir_id: HirId { owner: DefId(0:6 ~ true[317d]::prusti_pre_item_test1_$(NUM_UUID)[0]), local_id: 5 } } }) }], posts: [] }
DefId(0:11 ~ true[317d]::test2[0]) ProcedureSpecification { pres: [], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: BodyId { hir_id: HirId { owner: DefId(0:9 ~ true[317d]::prusti_post_item_test2_$(NUM_UUID)[0]), local_id: 5 } } }) }] }
DefId(0:22 ~ true[317d]::test4[0]) ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: BodyId { hir_id: HirId { owner: DefId(0:18 ~ true[317d]::prusti_pre_item_test4_$(NUM_UUID)[0]), local_id: 5 } } }) }], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: BodyId { hir_id: HirId { owner: DefId(0:20 ~ true[317d]::prusti_post_item_test4_$(NUM_UUID)[0]), local_id: 5 } } }) }] }
